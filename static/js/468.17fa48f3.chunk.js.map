{"version":3,"file":"static/js/468.17fa48f3.chunk.js","mappings":"2JACA,SAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,uBCGhL,MAUA,EAVoBA,IAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,OAAS,IAAMD,EAAEE,OAAOC,UACtCL,EAAAA,EAAAA,KAACM,EAAAA,GAAO,CAACC,GAAIT,EAAKO,SAAER,EAAMW,QACxB,ECHd,EAJiBX,IACNG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEO,QAAQJ,SAAER,EAAMY,U,4CCC7C,MAAMC,GAAcC,EAAAA,EAAAA,GAAiB,IAkBrC,GAAeC,EAAAA,EAAAA,GAAU,CACrBC,KAAM,2BADV,EAhBwBhB,IAEhBiB,EAAAA,EAAAA,MAAA,QAAMC,SAAUlB,EAAMmB,aAAaX,SAAA,EAC/BL,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBY,YAAY,qBACZd,KAAM,sBAEjBR,EAAAA,EAAAA,KAAA,OAAAK,UACIL,EAAAA,EAAAA,KAAA,UAAAK,SAAQ,gBCYxB,EAvBiBR,IACb,IAAI0B,EAAQ1B,EAAM2B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAIC,IAAK5B,EAAAA,EAAAA,KAAC6B,EAAU,CAAC9B,GAAI6B,EAAE7B,GAAeS,KAAMoB,EAAEpB,MAAdoB,EAAE7B,MACtE+B,EAAmBP,EAAMQ,SAASJ,KAAIK,IAAKhC,EAAAA,EAAAA,KAACiC,EAAO,CAACxB,QAASuB,EAAEvB,SAAcuB,EAAEjC,MAMnF,OACIe,EAAAA,EAAAA,MAAA,OAAKb,UAAWC,EAAEwB,QAAQrB,SAAA,EACtBL,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEgC,aAAa7B,SAC1BoB,KAELX,EAAAA,EAAAA,MAAA,OAAKb,UAAWC,EAAE6B,SAAS1B,SAAA,EACvBL,EAAAA,EAAAA,KAAA,OAAAK,SAAMyB,KACN9B,EAAAA,EAAAA,KAACmC,EAAc,CAACpB,SAXLqB,IACnBvC,EAAMwC,YAAYD,EAAOE,eAAe,SAYlC,E,wBCrBd,MAAMC,EAA8BhB,IAAK,CACrCiB,OAAQjB,EAAMkB,KAAKD,SCCvB,MAcA,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAfqBpB,IACd,CACHC,YAAaD,EAAMC,gBAICoB,IACjB,CACHP,YAAcC,IACVM,GAASC,EAAAA,EAAAA,GAAmBP,GAAgB,ODPvBQ,IAC7B,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,OAAKC,KAAKrD,MAAM2C,QAETxC,EAAAA,EAAAA,KAAC8C,EAAS,IAAKI,KAAKrD,SAFIG,EAAAA,EAAAA,KAACmD,EAAAA,GAAQ,CAAC5C,GAAG,UAGhD,EAKJ,OAFqCoC,EAAAA,EAAAA,IAAQJ,EAARI,CAAoCI,EAEpC,GCCzC,CAGEK,E","sources":["webpack://it-kama-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__LlpQZ\",\"dialogsItems\":\"Dialogs_dialogsItems__5WO7U\",\"active\":\"Dialogs_active__CQURZ\",\"messages\":\"Dialogs_messages__1z7vM\",\"message\":\"Dialogs_message__tf1V-\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder=\"Enter your message\"\r\n                       name={\"newMessageBody\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'dialog-add-message-form'\r\n})(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem id={d.id} key={d.id} name={d.name}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","_jsx","className","s","dialog","active","children","NavLink","to","name","message","maxLength50","maxLengthCreator","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","dialogsItems","AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","React","render","this","Navigate","Dialogs"],"sourceRoot":""}